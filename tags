!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AUDIODIR	tools.go	/^const AUDIODIR = "\/mnt\/audio\/"$/;"	c
Client	ws_client.go	/^type Client struct {$/;"	t
CreateDirIfNotExist	tools.go	/^func CreateDirIfNotExist(dir string) error {$/;"	f
GetIfaceIPByName	tools.go	/^func GetIfaceIPByName(ifaceName string) string {$/;"	f
Save2File	tools.go	/^func Save2File(c *Client, suffix string, message []byte) error {$/;"	f
ScoreConfigStr	score_config.go	/^var ScoreConfigStr = `$/;"	v
WSMsg	ws_client.go	/^type WSMsg struct {$/;"	t
buildRSP	ssound.go	/^func buildRSP(c *Client, ssData []byte) (finalBytes []byte) {$/;"	f
cancelEngine	ssound.go	/^func cancelEngine(c *Client) {$/;"	f
decodeBinary	decode.go	/^func decodeBinary(c *Client, inBuf []byte) []byte {$/;"	f
deleteDecoder	decode.go	/^func deleteDecoder(c *Client) {$/;"	f
deleteEngine	ssound.go	/^func deleteEngine(c *Client) {$/;"	f
feedEngine	ssound.go	/^func feedEngine(c *Client, data []byte) {$/;"	f
gMap	ws_client.go	/^var gMap = cmap.New()$/;"	v
getIpPort	ws_client.go	/^func getIpPort(req *http.Request) (id string, port string) {$/;"	f
handleMessage	ws_client.go	/^func handleMessage(c *Client, msgType int, message []byte) {$/;"	f
initDecoder	decode.go	/^func initDecoder(c *Client) {$/;"	f
initEngine	ssound.go	/^func initEngine(c *Client) {$/;"	f
initTemplate	ssound.go	/^var initTemplate = `{   $/;"	v
main	decode.go	/^package main$/;"	p
main	main.go	/^func main() {$/;"	f
main	main.go	/^package main$/;"	p
main	post_italk_score.go	/^package main$/;"	p
main	score_config.go	/^package main$/;"	p
main	ssound.go	/^package main$/;"	p
main	tools.go	/^package main$/;"	p
main	ws_client.go	/^package main$/;"	p
maxMessageSize	ws_client.go	/^	maxMessageSize = 1024 * 10 * 10$/;"	c
newPostRequest	post_italk_score.go	/^func newPostRequest(uri string, params map[string]string) (*http.Request, error) {$/;"	f
newfileUploadRequest	post_italk_score.go	/^func newfileUploadRequest(uri string, params map[string]string, paramName, path string) (*http.Request, error) {$/;"	f
newline	ws_client.go	/^	newline = []byte{'\\n'}$/;"	v
pingPeriod	ws_client.go	/^	pingPeriod = (pongWait * 9) \/ 10$/;"	c
pongWait	ws_client.go	/^	pongWait = 30 * time.Second$/;"	c
postITalkScore	post_italk_score.go	/^func postITalkScore(c *Client, score float64) {$/;"	f
readMessage	ws_client.go	/^func (c *Client) readMessage() {$/;"	f
serveWs	ws_client.go	/^func serveWs(w http.ResponseWriter, r *http.Request) {$/;"	f
similarityURL	ws_client.go	/^	similarityURL  = "http:\/\/140.143.138.146:6000\/similarity"$/;"	c
space	ws_client.go	/^	space   = []byte{' '}$/;"	v
ssoundCallback	ssound.go	/^func ssoundCallback(key C.int, cmsg *C.char, size C.int) {$/;"	f
startEngine	ssound.go	/^func startEngine(c *Client) {$/;"	f
startTemplate	ssound.go	/^var startTemplate = `$/;"	v
stopEngine	ssound.go	/^func stopEngine(c *Client) {$/;"	f
upgrader	ws_client.go	/^var upgrader = websocket.Upgrader{$/;"	v
writeMessage	ws_client.go	/^func (c *Client) writeMessage() {$/;"	f
writeWait	ws_client.go	/^	writeWait = 10 * time.Second$/;"	c
